set.seed(100)
# Establish coefficients for AR(1) model.
phi_0 <- 0.001
phi_1 <- 1
a_t <- 0.16
p_200 <- 4.551
# Compute conditional expectation forecast.
p_201 <- phi_0 + p_200
p_201
# Compute forecast incorporating white noise.
forecast_1_step <- phi_0 + p_200 + rnorm(1, mean = 0, sd = sqrt(a_t))
forecast_1_step
# Compute z-score for \alpha = 0.05
z_score <- qnorm(0.975)
# Create 95% for forecast.
lower_bound <- p_201 - (z_score * sqrt(a_t))
upper_bound <- p_201 + (z_score * sqrt(a_t))
confidence_interval <- c(lower_bound, upper_bound)
confidence_interval
# Compute conditional expectation forecast.
p_202 <- phi_0 + p_201
p_202
# Compute forecast incorporating white noise.
forecast_2_step <- phi_0 + p_201 + rnorm(1, mean = 0, sd = sqrt(a_t))
forecast_2_step
# Compute forecast step error.
forecast_2_step_SE <- sqrt(0.16 * 2)
forecast_2_step_SE
# Compute conditional expectation forecast.
p_202 <- phi_0 + p_201
p_202
# Compute forecast incorporating white noise.
forecast_2_step <- phi_0 + p_201 + rnorm(1, mean = 0, sd = sqrt(a_t))
forecast_2_step
# Compute forecast step error.
forecast_2_step_SE <- sqrt(0.16 * 2)
forecast_2_step_SE
# Compute forecast incorporating white noise.
forecast_100_step <- 100 * phi_0 + p_200 + rnorm(1, mean = 0, sd = sqrt(a_t))
forecast_100_step
# Establish coefficents of AR(3) model.
phi_0 <- 0.006
phi_1 <- 0.168
phi_2 <- 0.338
phi_3 <- -0.189
# Calculated expected growth or \mu.
E_rt <- phi_0 / (1 - phi_1 - phi_2 - phi_3)
E_rt
E_rt * 100
# Coefficients of the polynomial in ascending order
coefficients <- c(1, -0.168, -0.338, 0.189)
# Compute the roots
roots <- polyroot(coefficients)
print(roots)
# Compute modulus of complex root.
a <- 1.608257
b <- 1.057496
sqrt(a^2 + b^2)
# Calculate angle in radians.
theta <- atan2(b, a)
# Calculate the length of the business cycle in quarters.
cycle_length <- 2 * pi / theta
cycle_length
# Convert quarters to years.
cycle_length / 4
# Establish the directory for data.
data_directory <- "C:/Users/sbhatia2/My Drive/University/Academics/Semester V/FA542 - Time Series with Application to Finance/FA542 - Exams/FA542 - Midterm Exam/"
# Load in the dataset.
gdp_deflator <- read.table(paste(data_directory, 'q-gdpdef.txt', sep=""), header = T)
# Convert the year, month, and day into a Date object
gdp_deflator$date <- as.Date(with(gdp_deflator, paste(year, mom, day, sep="-")), format="%Y-%m-%d")
# Move 'date' column to the first position and remove nonessential columns.
gdp_deflator <- gdp_deflator[, c("date", "gdpdef")]
head(gdp_deflator)
# Plot the data
plot(gdp_deflator$date, gdp_deflator$gdpdef, type="l", xlab="Date", ylab="GDP Deflator")
library(tseries)
adf.test(gdp_deflator$gdpdef)
adf.test(diff(gdp_deflator$gdpdef))
adf.test(diff(diff(gdp_deflator$gdpdef)))
library(forecast)
# Create ARIMA model based on data.
arima_model <- auto.arima(gdp_deflator$gdpdef)
summary(arima_model)$
# Check the residuals to validate the model.
checkresiduals(arima_model)
library(forecast)
# Create ARIMA model based on data.
arima_model <- auto.arima(gdp_deflator$gdpdef)
summary(arima_model)$
# Check the residuals to validate the model.
checkresiduals(arima_model)
# Create ARIMA model based on data.
arima_model <- auto.arima(gdp_deflator$gdpdef)
summary(arima_model)
# Check the residuals to validate the model.
checkresiduals(arima_model)
# Conduct the Ljung-Box test on the residuals
ljung_box_result <- Box.test(arima_model$residuals, lag=log(length(arima_model$residuals)))
ljung_box_result
forecast_values <- forecast(arima_model, h = 4)
forecast_values
forecast_values$mean
library(quantmod)
# Retrieve the data.
start_date <- '2018-01-01'
end_date <- '2023-10-23'
getSymbols("MCD", from = start_date, to = end_date)
mcd_adj_price <- MCD$MCD.Adjusted
head(mcd_adj_price)
# Compute daily log returns.
mcd_log_returns <- diff(log(mcd_adj_price))
# Drop NA values (first value will be NA due to differencing).
mcd_log_returns <- na.omit(mcd_log_returns)
head(mcd_log_returns)
plot(mcd_log_returns)
adf.test(mcd_log_returns)
mcd_model <- auto.arima(mcd_log_returns)
summary(mcd_model)
checkresiduals(mcd_model)
ljung_box_result <- Box.test(mcd_model$residuals, lag=log(length(mcd_model$residuals)))
ljung_box_result
# Create a function to perform grid search to find the best ARIMA based on AIC.
grid_search <- function(ts)
{
best_model <- NULL
best_aic <- Inf
best_order <- c(0, 0, 0)
for (p in 0:10)
{
for (d in 0:0)
{
for (q in 0:10)
{
model <- arima(ts, order = c(p, d, q))
aic <- AIC(model)
if (aic < best_aic)
{
best_model <- model
best_aic <- aic
best_order <- c(p, d, q)
}
}
}
}
# Create a result data frame with the best AIC and formatted best order.
result_df <- data.frame(Best_AIC = best_aic, Best_Order = paste0("(", paste(best_order, collapse = ","), ")"))
return(result_df)
}
grid_search(mcd_log_returns)
mcd_model2 <- arima(mcd_returns, order = c(p = 6, d = 0, q = 5))
mcd_model2 <- arima(mcd_log_returns, order = c(p = 6, d = 0, q = 5))
summary(mcd_model2)
Box.test(mcd_model2$residuals, lag = log(length(mcd_model$residuals)))
# Determine the split point.
split_index <- round(length(mcd_returns) * 0.7)
# Create training and test sets.
train_data <- mcd_log_returns[1:split_index]
# Determine the split point.
split_index <- round(length(mcd_log_returns) * 0.7)
# Create training and test sets.
train_data <- mcd_log_returns[1:split_index]
test_data <- mcd_log_returns[(split_index+1):length(mcd_log_returns)]
length(train_data)
length(test_data)
forecast_results <- forecast(mcd_model2, h = length(test_data))
# Calculate accuracy metrics.
accuracy_metrics <- accuracy(forecast_results, test_data)
accuracy_metrics
summary(mcd_model2)
