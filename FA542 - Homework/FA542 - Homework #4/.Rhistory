library(quantmod)
# Set the date range.
start_date <- as.Date("1990-01-01")
end_date <- as.Date("2023-11-01")
# Download the data.
getSymbols("MSFT", src = "yahoo", from = start_date, to = end_date)
# View the data.
head(MSFT)
library(forecast)
# Calculate monthly returns.
monthly_prices <- to.monthly(MSFT, indexAt='lastof', OHLC=FALSE)
monthly_log_returns <- diff(log(Cl(monthly_prices)), lag=1)
# Remove the first NA value.
monthly_log_returns <- na.omit(monthly_log_returns)
head(monthly_log_returns)
# Check for serial correlation using ACF.
acf(monthly_log_returns, lag.max=12, main="ACF of Monthly Log Returns")
# Perform a statistical test for autocorrelation.
Box.test(monthly_log_returns, type = "Ljung-Box")
# Calculate the first difference of the monthly log returns.
diff_log_returns <- diff(monthly_log_returns)
# Removing the NA value that gets introduced by differencing.
diff_log_returns <- na.omit(diff_log_returns)
# Check again for serial correlation using ACF.
acf(diff_log_returns, lag.max=12, main="ACF of Differenced Monthly Log Returns")
# Perform the Box test again.
Box.test(diff_log_returns, type = "Ljung-Box")
# Calculate the second difference of the monthly log returns.
second_diff_log_returns <- diff(diff_log_returns)
# Removing the NA value that gets introduced by differencing.
second_diff_log_returns <- na.omit(second_diff_log_returns)
# Check again for serial correlation using ACF.
acf(second_diff_log_returns, lag.max=12, main="ACF of Second Differenced Monthly Log Returns")
# Perform the Box test again.
Box.test(second_diff_log_returns, type = "Ljung-Box")
auto_arima_model <- auto.arima(monthly_log_returns)
# Check the residuals of the ARIMA model.
arima_residuals <- residuals(auto_arima_model)
# Perform the Box test on the residuals.
Box.test(arima_residuals, type = "Ljung-Box")
# Calculate squared returns.
squared_returns <- monthly_log_returns^2
# Ljung-Box test on squared returns for 6 and 12 lags.
Box.test(squared_returns, lag = 6, type = "Ljung-Box")
Box.test(squared_returns, lag = 12, type = "Ljung-Box")
# Calculated squared residuals.
squared_residuals <- arima_residuals^2
# Ljung-Box test on squared returns for 6 and 12 lags.
Box.test(squared_residuals, lag = 6, type = "Ljung-Box")
Box.test(squared_residuals, lag = 12, type = "Ljung-Box")
# Load the required library
library(rugarch)
# Specify the GARCH(1,1) model
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std")
# Fit the model
fit <- ugarchfit(spec = spec, data = monthly_log_returns)
fit
require(NTS)
set.seed(1)
phi <- matrix(c(0.8,-0.7),2,1)
m1 <- uTAR.sim(400, c(1,1), phi)
xt <- m1$series
head(xt)
# Time plot
plot(xt, type = "l", main = "Time Plot of TAR(1) Series", xlab = "Time", ylab = "Series Value")
# Sample Autocorrelation Function (ACF) with 12 lags
acf(xt, lag.max = 12, main = "Sample ACF of TAR(1) Series")
require(NTS)
set.seed(1)
phi <- matrix(c(0.8,-0.7),2,1)
m1 <- uTAR.sim(400, c(1,1), phi)
xt <- m1$series
head(xt)
# Time plot
plot(xt, type = "l", main = "Time Plot of TAR(1) Series", xlab = "Time", ylab = "Series Value")
# Sample Autocorrelation Function (ACF) with 12 lags
acf(xt, lag.max = 12, main = "Sample ACF of TAR(1) Series")
# Scatter plot of xt vs xt-1 with loess smoothing.
xt_lag <- xt[-length(xt)]
xt_current <- xt[-1]
plot(xt_lag, xt_current, main = "Scatter Plot of xt vs xt-1", xlab = "xt-1", ylab = "xt")
lines(lowess(xt_lag, xt_current), col = "red")
library(tseries)
# ADF test
adf.test <- adf.test(xt)
# KPSS test
kpss.test <- kpss.test(xt)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(unemp_diff)
library(tseries)
# ADF test
adf.test <- adf.test(xt)
# KPSS test
kpss.test <- kpss.test(xt)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(unemp_diff)
# Scatter plot of xt vs xt-1 with loess smoothing.
xt_lag <- xt[-length(xt)]
xt_current <- xt[-1]
plot(xt_lag, xt_current, main = "Scatter Plot of xt vs xt-1", xlab = "xt-1", ylab = "xt")
lines(lowess(xt_lag, xt_current), col = "red")
require(NTS)
set.seed(1)
phi <- matrix(c(0.8,-0.7),2,1)
m1 <- uTAR.sim(400, c(1,1), phi)
xt <- m1$series
head(xt)
# Time plot
plot(xt, type = "l", main = "Time Plot of TAR(1) Series", xlab = "Time", ylab = "Series Value")
# Sample Autocorrelation Function (ACF) with 12 lags
acf(xt, lag.max = 12, main = "Sample ACF of TAR(1) Series")
# Load the required library
library(rugarch)
# Specify the GARCH(1,1) model
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std")
# Fit the model
fit <- ugarchfit(spec = spec, data = monthly_log_returns)
fit
# Calculate squared returns.
squared_returns <- monthly_log_returns^2
# Ljung-Box test on squared returns for 6 and 12 lags.
Box.test(squared_returns, lag = 6, type = "Ljung-Box")
Box.test(squared_returns, lag = 12, type = "Ljung-Box")
# Calculated squared residuals.
squared_residuals <- arima_residuals^2
# Ljung-Box test on squared returns for 6 and 12 lags.
Box.test(squared_residuals, lag = 6, type = "Ljung-Box")
Box.test(squared_residuals, lag = 12, type = "Ljung-Box")
library(forecast)
# Calculate monthly returns.
monthly_prices <- to.monthly(MSFT, indexAt='lastof', OHLC=FALSE)
monthly_log_returns <- diff(log(Cl(monthly_prices)), lag=1)
# Remove the first NA value.
monthly_log_returns <- na.omit(monthly_log_returns)
head(monthly_log_returns)
# Check for serial correlation using ACF.
acf(monthly_log_returns, lag.max=12, main="ACF of Monthly Log Returns")
# Perform a statistical test for autocorrelation.
Box.test(monthly_log_returns, type = "Ljung-Box")
# Calculate the first difference of the monthly log returns.
diff_log_returns <- diff(monthly_log_returns)
# Removing the NA value that gets introduced by differencing.
diff_log_returns <- na.omit(diff_log_returns)
# Check again for serial correlation using ACF.
acf(diff_log_returns, lag.max=12, main="ACF of Differenced Monthly Log Returns")
# Perform the Box test again.
Box.test(diff_log_returns, type = "Ljung-Box")
# Calculate the second difference of the monthly log returns.
second_diff_log_returns <- diff(diff_log_returns)
# Removing the NA value that gets introduced by differencing.
second_diff_log_returns <- na.omit(second_diff_log_returns)
# Check again for serial correlation using ACF.
acf(second_diff_log_returns, lag.max=12, main="ACF of Second Differenced Monthly Log Returns")
# Perform the Box test again.
Box.test(second_diff_log_returns, type = "Ljung-Box")
auto_arima_model <- auto.arima(monthly_log_returns)
# Check the residuals of the ARIMA model.
arima_residuals <- residuals(auto_arima_model)
# Perform the Box test on the residuals.
Box.test(arima_residuals, type = "Ljung-Box")
library(tseries)
library(TSA)
# ADF test
adf.test <- adf.test(xt)
# KPSS test
kpss.test <- kpss.test(xt)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(unemp_diff)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(xt)
library(tseries)
library(TSA)
# ADF test
adf.test <- adf.test(xt)
# KPSS test
kpss.test <- kpss.test(xt)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(xt)
# Display the results.
adf.test
kpss.test
tsay.test
library(TSA)
# Fit a two-regime TAR model.
tar.model <- tar(y = xt, p1 = 1, p2 = 1, d = 1)
# Summary of the model.
summary(tar.model)
# Extracting coefficients for each regime from the TAR model.
coefficients_regime1 <- coef(tar.model$qr1)
coefficients_regime2 <- coef(tar.model$qr2)
# Extracting the threshold value.
threshold_value <- tar.model$thd
coefficients_regime1
coefficients_regime2
threshold_value
coefficients_regime1
coefficients_regime2
threshold_value
# Load the data.
unemp_data <- read.csv("C:/Users/sbhatia2/My Drive/University/Academics/Semester V/FA542 - Time Series with Application to Finance/FA542 - Homework/FA542 - Homework #4/Unempduration.csv", header = TRUE)
head(unemp_diff)
# Load the data.
unemp_data <- read.csv("C:/Users/sbhatia2/My Drive/University/Academics/Semester V/FA542 - Time Series with Application to Finance/FA542 - Homework/FA542 - Homework #4/Unempduration.csv", header = TRUE)
head(unemp_diff)
head(unemp_data)
adf.test(unemp_data$UEMPMEAN)
# First difference of the data to address the trend and stationarity.
unemp_diff <- diff(unemp_data$UEMPMEAN)
head(unemp_diff)
adf.test(unemp_diff)
# Fit an AR model for differenced, stationary data.
ar_model <- ar(unemp_diff)
# Display AR model.
ar_model
# Check residuals for model with Ljung-Box test.
Box.test(residuals(ar_model), type = "Ljung-Box")
kpss.test <- kpss.test(unemp_diff)
# Perform Tsay's test for threshold nonlinearity.
tsay.test <- Tsay.test(unemp_diff)
# Display the test results.
kpss.test
tsay.test
optimal_d <- NULL
min_p_value <- 1
# Testing different delays d
for (d in 1:5) {
tsay_test <- Tsay.test(unemp_diff, lag = 5, d = d)
if (tsay_test$p.value < min_p_value) {
min_p_value <- tsay_test$p.value
optimal_d <- d
}
}
# optimal_d now contains the delay with the smallest p-value
print(optimal_d)
# Building a two-regime TAR model
tar_model <- tar(y = unemp_diff, p1 = 5, p2 = 5, d = optimal_d)
# Model summary
summary(tar_model)
# Model checking with diagnostic plots
par(mfrow=c(2,2))
plot(tar_model$residuals)
acf(tar_model$residuals)
pacf(tar_model$residuals)
qqnorm(tar_model$residuals)
qqline(tar_model$residuals)
# Extracting coefficients and threshold value
coefficients_regime1 <- coef(tar_model$qr1)
coefficients_regime2 <- coef(tar_model$qr2)
threshold_value <- tar_model$thd
# Printing the coefficients and threshold
print(coefficients_regime1)
print(coefficients_regime2)
print(threshold_value)
arima_model <- arima(unemp_diff, order = c(13, 0, 0))
arima_model$aic
tar_model$AIC
# Given values
a_100 <- 6
sigma2_100 <- 50
S_100 <- 2
# Calculating sigma2_101
if (S_100 == 1) {
sigma2_101 <- 0.1 * a_100^2 + 0.8 * sigma2_100
} else if (S_100 == 2) {
sigma2_101 <- 5 + 0.1 * a_100^2 + 0.5 * sigma2_100
}
# Printing the forecast
print(sigma2_101)
# Updated probability of S_100 = 2
prob_S100_eq_2 <- 0.9
prob_S100_eq_1 <- 1 - prob_S100_eq_2
# Transition probabilities
P_S2_given_S1 <- 0.1
P_S1_given_S2 <- 0.2
# Forecasting sigma2_101 using weighted average
sigma2_101_S1 <- 0.1 * a_100^2 + 0.8 * sigma2_100  # if S_101 = 1
sigma2_101_S2 <- 5 + 0.1 * a_100^2 + 0.5 * sigma2_100  # if S_101 = 2
# Weighted forecast
sigma2_101_forecast <- (prob_S100_eq_1 * P_S2_given_S1 * sigma2_101_S1) +
(prob_S100_eq_2 * P_S1_given_S2 * sigma2_101_S2)
# Printing the forecast
print(sigma2_101_forecast)
