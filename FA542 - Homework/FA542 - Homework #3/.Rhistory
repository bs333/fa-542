# Establish the directory for data.
data_directory <- "C:/Users/sbhatia2/My Drive/University/Academics/Semester V/FA542 - Time Series with Application to Finance/FA542 - Homework/FA542 - Homework #3/FA542 - Homework #3 ~ Data/"
# Load in each dataset.
moody_Aaa <- read.table(paste(data_directory, 'w-aaa.txt', sep=""))
moody_Baa <- read.table(paste(data_directory, 'w-Baa.txt', sep=""))
# Load JPM CDS Spreads.
JPM_CDS <- read.table(paste(data_directory, 'd-cdsJPM.txt', sep=""), col.names = c("Date", "JPM_CDS_Spreads"))
# Load libraries for skewness, kurtosis, and plotting.
library(moments)
library(fBasics)
# Establish the directory for data.
data_directory <- "C:/Users/sbhatia2/My Drive/University/Academics/Semester V/FA542 - Time Series with Application to Finance/FA542 - Homework/FA542 - Homework #3/FA542 - Homework #3 ~ Data/"
# Load in each dataset.
moody_Aaa <- read.table(paste(data_directory, 'w-aaa.txt', sep=""))
moody_Baa <- read.table(paste(data_directory, 'w-Baa.txt', sep=""))
head(moody_Aaa)
head(moody_Baa)
# Combine V1, V2, and V3 columns into a single date column.
moody_Aaa$Date <- as.Date(paste(moody_Aaa$V1, moody_Aaa$V2, moody_Aaa$V3, sep = "-"), format = "%Y-%m-%d")
moody_Baa$Date <- as.Date(paste(moody_Baa$V1, moody_Baa$V2, moody_Baa$V3, sep = "-"), format = "%Y-%m-%d")
# Keep only 'Date' and rename 'V4' to 'Aaa Bond Yield' and 'Baa Bond Yield' respectively.
moody_Aaa <- moody_Aaa[, c("Date", "V4")]
moody_Baa <- moody_Baa[, c("Date", "V4")]
colnames(moody_Aaa)[colnames(moody_Aaa) == "V4"] <- "Aaa Bond Yield"
colnames(moody_Baa)[colnames(moody_Baa) == "V4"] <- "Baa Bond Yield"
head(moody_Aaa)
head(moody_Baa)
# Create function that calculates the sample mean, standard deviation, skewness, excess kurtosis, minimum, and maximum of simple returns.
compute_statistics <- function(returns)
{
mean_val <- mean(returns)
sd_val <- sd(returns)
skewness_val <- skewness(returns)
excess_kurtosis_val <- kurtosis(returns)
min_val <- min(returns)
max_val <- max(returns)
# Create a list to hold each sample statistic.
result <- list(
mean = mean_val,
standard_deviation = sd_val,
skewness = skewness_val,
excess_kurtosis = excess_kurtosis_val,
minimum = min_val,
maximum = max_val
)
return(result)
}
# Compute statistics for both bond yields.
compute_statistics(moody_Aaa$`Aaa Bond Yield`)
compute_statistics(moody_Baa$`Baa Bond Yield`)
# Construct function to test whether the population skewness of yields is equal to 0 or not.
skewness_test <- function(yields)
{
t_skewness <- skewness(yields) / sqrt(6 / length(yields))
p_skewness <- 2 * (1 - pnorm(abs(t_skewness)))
return(p_skewness)
}
# Conduct the skewness test for both yields.
skewness_test(moody_Aaa$`Aaa Bond Yield`)
skewness_test(moody_Baa$`Baa Bond Yield`)
# Construct function to test whether the population kurtosis of returns is equal to 3 or not (excess kurtosis = 0).
kurtosis_test <- function(yields)
{
# Since the kurtosis function already computes excess log returns, we do not have to subtract by three.
t_kurtosis <- (kurtosis(yields)) / sqrt(24 / length(yields))
p_kurtosis <- 2 * (1 - pnorm(abs(t_kurtosis)))
return(p_kurtosis)
}
# Conduct the kurtosis test for both yields.
kurtosis_test(moody_Aaa$`Aaa Bond Yield`)
kurtosis_test(moody_Baa$`Baa Bond Yield`)
# Load in libraries for time series analysis.
library(tseries)
# Retrieve the Aaa bond yields.
aaa_bond_yield <- moody_Aaa$`Aaa Bond Yield`
# Convert Aaa bond yields to a time series object.
aaa_ts <- ts(aaa_bond_yield)
# Plot the time series.
plot(aaa_ts, main = "Aaa Bond Yield Time Series")
# Perform the ADF test to check for stationarity.
adf_test_result <- adf.test(aaa_ts)
adf_test_result
# Perform differencing.
differenced_aaa_ts <- diff(aaa_ts)
adf.test(differenced_aaa_ts)
# Import the `forecast` library for ARIMA model.
library(forecast)
# Create a layout with one row and two columns.
par(mfrow = c(1, 2))
# Plot ACF and PACF for Aaa bond yields.
acf(aaa_ts)
pacf(aaa_ts)
# Create a function to perform grid search to find the best ARIMA based on AIC.
grid_search <- function(ts)
{
best_model <- NULL
best_aic <- Inf
best_order <- c(0, 0, 0)
for (p in 0:5)
{
for (d in 1:1)
{
for (q in 0:5)
{
model <- arima(ts, order = c(p, d, q))
aic <- AIC(model)
if (aic < best_aic)
{
best_model <- model
best_aic <- aic
best_order <- c(p, d, q)
}
}
}
}
# Create a result data frame with the best AIC and formatted best order.
result_df <- data.frame(Best_AIC = best_aic, Best_Order = paste0("(", paste(best_order, collapse = ","), ")"))
return(result_df)
}
grid_search(aaa_ts)
# Compare model with `auto.arima`.
auto.arima(aaa_ts)
# Retrieve Baa bond yields.
baa_bond_yield <- moody_Baa$`Baa Bond Yield`
# Fit a linear regression model where Aaa bonds is the dependent variable and Baa is the independent variable.
model <- lm(aaa_bond_yield ~ baa_bond_yield)
# Get summary of the regression model.
summary(model)
# Create a scatterplot.
plot(baa_bond_yield, aaa_bond_yield, main = "Scatterplot of Aaa vs. Baa Bond Yields")
# Add the regression line to the plot.
abline(model, col = "red")
# Retrieve the residuals from the linear regression model.
residuals <- residuals(model)
# Visualize the residuals.
plot(residuals, main = "Residuals from Linear Regression")
# Check stationarity of residuals.
adf.test(residuals)
# After differencing the residuals, we have stationarity.
adf.test(diff(residuals))
# Create ARIMA model for residual using `auto.arima`.
auto_residuals_model <- auto.arima(residuals)
# Use grid search function to find ARIMA model with lowest AIC.
grid_search(residuals)
best_residuals_model <- arima(residuals, order = c(5, 1, 4))
# Diagnostic plots for the time series model.
plot(best_residuals_model)
# Load in S&P500 data.
SP_500 <- read.table(paste(data_directory, 'sp5may.txt', sep=""), header = T)
head(SP_500)
# Calculate log returns for spot and futures.
SP_500_futures_log_returns <- diff(SP_500$lnfuture)
SP_500_spot_log_returns <- diff(SP_500$lnspot)
head(SP_500_futures_log_returns)
head(SP_500_spot_log_returns)
# Build the linear regression model.
model <- lm(SP_500_futures_log_returns ~ SP_500_spot_log_returns, data = SP_500)
# Print the summary of the linear regression results.
summary(model)
# Fit an ARIMA model for the residuals of the model.
auto.arima((residuals(model)))
# Load JPM CDS Spreads.
JPM_CDS <- read.table(paste(data_directory, 'd-cdsJPM.txt', sep=""), col.names = c("Date", "JPM_CDS_Spreads"))
# Convert the date column to "YYYYMMDD" format.
JPM_CDS$Date <- as.Date(as.character(JPM_CDS$Date), format = "%Y%m%d")
head(JPM_CDS)
# Calculate x_t.
x_t <- 100 * JPM_CDS$JPM_CDS_Spreads
# Calculate the differenced series y_t.
y_t <- c(NA, diff(x_t))
# Plot the differenced series y_t.
plot(JPM_CDS$Date, y_t, type = "l", xlab = "Date", ylab = "y_t", main = "Differenced Series y_t")
par(mfrow = c(1, 2))
acf(y_t)
acf(na.omit(y_t)
acf(na.omit(y_t))
# Load JPM CDS Spreads.
JPM_CDS <- read.table(paste(data_directory, 'd-cdsJPM.txt', sep=""), col.names = c("Date", "JPM_CDS_Spreads"))
# Convert the date column to "YYYYMMDD" format.
JPM_CDS$Date <- as.Date(as.character(JPM_CDS$Date), format = "%Y%m%d")
head(JPM_CDS)
# Calculate x_t.
x_t <- 100 * JPM_CDS$JPM_CDS_Spreads
# Calculate the differenced series y_t.
y_t <- c(NA, diff(x_t))
# Plot the differenced series y_t.
plot(JPM_CDS$Date, y_t, type = "l", xlab = "Date", ylab = "y_t", main = "Differenced Series y_t")
par(mfrow = c(1, 2))
auto.arima(y_t)
# Load JPM CDS Spreads.
JPM_CDS <- read.table(paste(data_directory, 'd-cdsJPM.txt', sep=""), col.names = c("Date", "JPM_CDS_Spreads"))
# Convert the date column to "YYYYMMDD" format.
JPM_CDS$Date <- as.Date(as.character(JPM_CDS$Date), format = "%Y%m%d")
head(JPM_CDS)
# Calculate x_t.
x_t <- 100 * JPM_CDS$JPM_CDS_Spreads
# Calculate the differenced series y_t.
y_t <- c(NA, diff(x_t))
# Plot the differenced series y_t.
plot(JPM_CDS$Date, y_t, type = "l", xlab = "Date", ylab = "y_t", main = "Differenced Series y_t")
auto.arima(y_t)
